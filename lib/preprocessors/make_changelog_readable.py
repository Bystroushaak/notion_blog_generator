from functools import lru_cache
from collections import namedtuple

import dhtmlparser3

from lib.settings import settings
from lib.virtual_fs import Directory
from lib.virtual_fs import VirtualFS

from .preprocessor_base import PreprocessorBase


class Post(namedtuple("Post", "timestamp title description description_clean")):
    pass


class Changelog:
    def __init__(self, changelog_dir, resource_registry):
        self.feed_name = "atom.xml"
        self.posts = []
        self.posts_deduplication_cache = set()
        self._changelog_dir_name = changelog_dir.filename

        self.make_changelog_readable(changelog_dir.inner_index)
        self.make_changelog_readable(changelog_dir.outer_index)

        # remove "table" files generated by notion for each entry
        changelog_dir.files = [file for file in changelog_dir.files
                               if file.is_index]

        self.changelog_ref = resource_registry.register_item_as_ref_str(
            changelog_dir.outer_index
        )

    @property
    def atom_feed_url(self):
        return settings.atom_feed_root_url + self.feed_name

    def make_changelog_readable(self, changelog_page):
        content_element = "<div>\n"
        tr_line_template = "  <p><span class=\"changelog_short\">%s</span> (%s)</p>\n%s"
        tr_line_template += "  <hr style=\"margin-bottom: 1em; margin-top: 1em;\"/>\n\n"

        tbody = changelog_page.dom.find("tbody")[0]
        for tr in reversed(tbody.find("tr")):
            td_date, td_title, td_content = tr.find("td")[:3]

            content, content_clean = self._parse_content(td_content)
            date = self._parse_date(td_date)
            post = Post(date, td_title.content_str(), content, content_clean)

            tr_line = tr_line_template % (post.title, post.timestamp, post.description)
            content_element += tr_line

            if post not in self.posts_deduplication_cache:
                self.posts.append(post)
                self.posts_deduplication_cache.add(post)

        content_element += "</div>\n"

        table_content_el = dhtmlparser3.parse(content_element).find("div")[0]
        changelog_page.dom.find("table")[0].replace_with(table_content_el)

    def _parse_content(self, td_content):
        content = td_content.find("a")
        if content and content[0].content_str().strip() == "Untitled":
            content = ""
            content_clean = ""
        elif not content:
            raise ValueError("Changelog doesn't contain link. Please add it.")
        else:
            content_clean = content[0].content_str()
            content_template = "<p class=\"changelog_description\"><em>%s</em></p>\n"
            content = content_template % content_clean

        return content, content_clean

    def _parse_date(self, td_date):
        time_tags = td_date.find("time")
        if not time_tags:
            return td_date.content_str().replace("/", "-")

        time_content = time_tags[0].content_str().replace("/", "-")
        return "<time>%s</time>" % time_content

    def get_articles_as_html_for_root_index(self, how_many=5):
        output = "<h1>Recent posts</h1>\n<div class=\"recent_posts\">\n"
        template = "  <h4 class=\"changelog_short\">%s (%s)</h4>\n<p>%s</p>"

        updates = []
        for cnt, post in enumerate(self.posts):
            if cnt >= how_many:
                break

            updates.append(template % (post.title, post.timestamp, post.description or "No description."))

        output += "\n".join(updates)

        output += "</div>\n"

        return output

    @lru_cache()
    def get_last_n_for_sidebars(self, how_many=5):
        output = "<h3>New posts</h3>\n<ul>\n"

        for cnt, post in enumerate(self.posts):
            if cnt >= how_many:
                break

            output += "  <li>%s</li>\n" % post.title

        output += "</ul>\n"

        if len(self.posts) > how_many:
            output += '\n& <a href="%s">more</a>' % self.changelog_ref

        return output

    def __repr__(self):
        return "Changelog(%s)" % self._changelog_dir_name


class LoadChangelogsAndMakeThemReadable(PreprocessorBase):
    @classmethod
    def preprocess(cls, virtual_fs: VirtualFS, root: Directory):
        settings.logger.info("Converting Changelog table to readable page..")

        en_changelog = Changelog(root.subdir_by_name("Changelog"),
                                 virtual_fs.resource_registry)
        en_changelog.feed_name = "atom.xml"
        root.subdir_by_name("en").changelog = en_changelog

        cz_changelog = Changelog(root.subdir_by_name("Zmeny"),
                                 virtual_fs.resource_registry)
        cz_changelog.feed_name = "atom_cz.xml"
        root.subdir_by_name("cz").changelog = cz_changelog
